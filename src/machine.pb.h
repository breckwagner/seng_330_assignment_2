// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machine.proto

#ifndef PROTOBUF_machine_2eproto__INCLUDED
#define PROTOBUF_machine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_machine_2eproto();
void protobuf_AssignDesc_machine_2eproto();
void protobuf_ShutdownFile_machine_2eproto();

class SerializedMachine;

// ===================================================================

class SerializedMachine : public ::google::protobuf::Message {
 public:
  SerializedMachine();
  virtual ~SerializedMachine();

  SerializedMachine(const SerializedMachine& from);

  inline SerializedMachine& operator=(const SerializedMachine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedMachine& default_instance();

  void Swap(SerializedMachine* other);

  // implements Message ----------------------------------------------

  SerializedMachine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SerializedMachine& from);
  void MergeFrom(const SerializedMachine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // optional string machine_log = 3;
  inline bool has_machine_log() const;
  inline void clear_machine_log();
  static const int kMachineLogFieldNumber = 3;
  inline const ::std::string& machine_log() const;
  inline void set_machine_log(const ::std::string& value);
  inline void set_machine_log(const char* value);
  inline void set_machine_log(const char* value, size_t size);
  inline ::std::string* mutable_machine_log();
  inline ::std::string* release_machine_log();
  inline void set_allocated_machine_log(::std::string* machine_log);

  // @@protoc_insertion_point(class_scope:data.SerializedMachine)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_machine_log();
  inline void clear_has_machine_log();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* status_;
  ::std::string* machine_log_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_machine_2eproto();
  friend void protobuf_AssignDesc_machine_2eproto();
  friend void protobuf_ShutdownFile_machine_2eproto();

  void InitAsDefaultInstance();
  static SerializedMachine* default_instance_;
};
// ===================================================================


// ===================================================================

// SerializedMachine

// optional int32 id = 1;
inline bool SerializedMachine::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedMachine::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerializedMachine::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerializedMachine::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SerializedMachine::id() const {
  // @@protoc_insertion_point(field_get:data.SerializedMachine.id)
  return id_;
}
inline void SerializedMachine::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.SerializedMachine.id)
}

// optional string status = 2;
inline bool SerializedMachine::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerializedMachine::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerializedMachine::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerializedMachine::clear_status() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& SerializedMachine::status() const {
  // @@protoc_insertion_point(field_get:data.SerializedMachine.status)
  return *status_;
}
inline void SerializedMachine::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set:data.SerializedMachine.status)
}
inline void SerializedMachine::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.SerializedMachine.status)
}
inline void SerializedMachine::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.SerializedMachine.status)
}
inline ::std::string* SerializedMachine::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.SerializedMachine.status)
  return status_;
}
inline ::std::string* SerializedMachine::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SerializedMachine::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.SerializedMachine.status)
}

// optional string machine_log = 3;
inline bool SerializedMachine::has_machine_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SerializedMachine::set_has_machine_log() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SerializedMachine::clear_has_machine_log() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SerializedMachine::clear_machine_log() {
  if (machine_log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_log_->clear();
  }
  clear_has_machine_log();
}
inline const ::std::string& SerializedMachine::machine_log() const {
  // @@protoc_insertion_point(field_get:data.SerializedMachine.machine_log)
  return *machine_log_;
}
inline void SerializedMachine::set_machine_log(const ::std::string& value) {
  set_has_machine_log();
  if (machine_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_log_ = new ::std::string;
  }
  machine_log_->assign(value);
  // @@protoc_insertion_point(field_set:data.SerializedMachine.machine_log)
}
inline void SerializedMachine::set_machine_log(const char* value) {
  set_has_machine_log();
  if (machine_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_log_ = new ::std::string;
  }
  machine_log_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.SerializedMachine.machine_log)
}
inline void SerializedMachine::set_machine_log(const char* value, size_t size) {
  set_has_machine_log();
  if (machine_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_log_ = new ::std::string;
  }
  machine_log_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.SerializedMachine.machine_log)
}
inline ::std::string* SerializedMachine::mutable_machine_log() {
  set_has_machine_log();
  if (machine_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_log_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.SerializedMachine.machine_log)
  return machine_log_;
}
inline ::std::string* SerializedMachine::release_machine_log() {
  clear_has_machine_log();
  if (machine_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = machine_log_;
    machine_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SerializedMachine::set_allocated_machine_log(::std::string* machine_log) {
  if (machine_log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete machine_log_;
  }
  if (machine_log) {
    set_has_machine_log();
    machine_log_ = machine_log;
  } else {
    clear_has_machine_log();
    machine_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.SerializedMachine.machine_log)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_machine_2eproto__INCLUDED
